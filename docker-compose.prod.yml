services:
  # Production environment
  app-prod:
    # container_name: go-sse-prod   # ลบออกเพราะจะใช้ scale
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
      args:
        - BUILD_ENV=prod
    # ports:  # ลบออกเพราะจะใช้ nginx reverse proxy จัดการ
    #   - "8083:8080"
    environment:
      - APP_ENV=prod
    restart: unless-stopped
    deploy:
      mode: replicated
      replicas: 3  # กำหนดจำนวน replicas 
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - go-sse-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  # Reverse Proxy (Nginx)
  reverse-proxy:
    container_name: go-sse-nginx-prod
    image: nginx:alpine
    volumes:
      - ./configs/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8083:80"  # Map port 80 ของ Nginx ไปยัง port 8083 บน host
    depends_on:
      - app-prod
    networks:
      - go-sse-network
    restart: unless-stopped
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# กำหนดเครือข่ายสำหรับ containers
networks:
  go-sse-network:
    name: go-sse-network-prod
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500 